// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { CalendarEventReminder } from './CalendarEventReminder'
import type { CalendarEventStatus } from './CalendarEventStatus'
import type { ID } from './ID'
import type { RRuleOptions } from './RRuleOptions'
import type { JsonValue } from './serde_json/JsonValue'

/**
 * Calendar event object
 */
export type CalendarEventDTO = {
  /**
   * UUID of the event
   */
  id: ID
  /**
   * Optional title of the event
   */
  title?: string
  /**
   * Optional description of the event
   */
  description?: string
  /**
   * Optional type of the event
   * e.g. "meeting", "reminder", "birthday"
   */
  eventType?: string
  /**
   * Optional location of the event
   */
  location?: string
  /**
   * Flag to indicate if the event is all day, default is false
   */
  allDay: boolean
  /**
   * Status of the event, default is tentative
   */
  status: CalendarEventStatus
  /**
   * Optional parent event ID
   * This is useful for external applications that need to link Nittei's events to a wider data model (e.g. a project, an order, etc.)
   * Example: If the event is a meeting, the parent ID could be the project ID (ObjectId, UUID or any other string)
   */
  externalParentId?: string
  /**
   * Optional external ID
   * This is useful for external applications that need to link Nittei's events to their own data models
   * Example: If the event is a meeting, the external ID could be the meeting ID in the external system
   *
   * Note that nothing prevents multiple events from having the same external ID
   * This can also be a way to link events together
   */
  externalId?: string
  /**
   * Start time of the event (UTC)
   */
  startTime: Date
  /**
   * Start time of the event (UTC)
   */
  endTime: Date
  /**
   * Duration of the event in milliseconds
   */
  duration: number
  /**
   * Busy flag
   */
  busy: boolean
  /**
   * Last updated timestamp (UTC)
   */
  updated: Date
  /**
   * Created tiemstamp (UTC)
   */
  created: Date
  /**
   * Recurrence rule
   */
  recurrence?: RRuleOptions
  /**
   * Optional recurring until date
   * This is the date until which the event will recur
   * This is calculated by adding the duration to the until date
   */
  recurringUntil?: Date
  /**
   * List of exclusion dates for the recurrence rule
   */
  exdates: Array<Date>
  /**
   * Optional recurring event ID
   * This is the ID of the recurring event that this event is part of
   * Default is None
   */
  recurringEventId?: ID
  /**
   * Optional original start time of the event
   * This is the original start time of the event before it was moved (only for recurring events)
   * Default is None
   */
  originalStartTime?: Date
  /**
   * UUID of the calendar
   */
  calendarId: ID
  /**
   * UUID of the user
   */
  userId: ID
  /**
   * List of reminders
   */
  reminders: Array<CalendarEventReminder>
  /**
   * Metadata (e.g. {"key": "value"})
   */
  metadata?: JsonValue
}
