// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { DateTimeQuery } from './DateTimeQuery'
import type { ID } from './ID'
import type { IDQuery } from './IDQuery'
import type { RecurrenceQuery } from './RecurrenceQuery'
import type { StringQuery } from './StringQuery'
import type { JsonValue } from './serde_json/JsonValue'

/**
 * Part of the Request body for searching events for a user
 * This is the filter
 */
export type SearchEventsRequestBodyFilter = {
  /**
   * User ID
   */
  userId: ID
  /**
   * Optional query on event UUID(s)
   */
  eventUid?: IDQuery
  /**
   * Optional list of calendar UUIDs
   * If not provided, all calendars will be used
   */
  calendarIds?: Array<ID>
  /**
   * Optional query on external ID (which is a string as it's an ID from an external system)
   */
  externalId?: StringQuery
  /**
   * Optional query on external parent ID (which is a string as it's an ID from an external system)
   */
  externalParentId?: StringQuery
  /**
   * Optional query on start time - "lower than or equal", or "great than or equal" (UTC)
   */
  startTime?: DateTimeQuery
  /**
   * Optional query on end time - "lower than or equal", or "great than or equal" (UTC)
   */
  endTime?: DateTimeQuery
  /**
   * Optional query on event type
   */
  eventType?: StringQuery
  /**
   * Optional query on status
   */
  status?: StringQuery
  /**
   * Optional query on the recurring event UID
   */
  recurringEventUid?: IDQuery
  /**
   * Optional query on original start time - "lower than or equal", or "great than or equal" (UTC)
   */
  originalStartTime?: DateTimeQuery
  /**
   * Optional filter on the recurrence (existence)
   * This allows to filter on the existence or not of a recurrence, or the existence of a recurrence at a specific date
   */
  recurrence?: RecurrenceQuery
  /**
   * Optional list of metadata key-value pairs
   */
  metadata?: JsonValue
  /**
   * Optional query on created at - e.g. "lower than or equal", or "great than or equal" (UTC)
   */
  createdAt?: DateTimeQuery
  /**
   * Optional query on updated at - "lower than or equal", or "great than or equal" (UTC)
   */
  updatedAt?: DateTimeQuery
}
