// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { CalendarEventReminder } from './CalendarEventReminder'
import type { CalendarEventStatus } from './CalendarEventStatus'
import type { ID } from './ID'
import type { RRuleOptions } from './RRuleOptions'
import type { JsonValue } from './serde_json/JsonValue'

/**
 * Request body for updating an event
 */
export type UpdateEventRequestBodyV2 = {
  /**
   * Optional title of the event
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  title?: string | null
  /**
   * Optional description of the event
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  description?: string | null
  /**
   * Optional type of the event
   * e.g. "meeting", "reminder", "birthday"
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  eventType?: string | null
  /**
   * Optional external parent event ID
   * This is useful for external applications that need to link Nittei's events to a wider data model (e.g. a project, an order, etc.)
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  externalParentId?: string | null
  /**
   * Optional external event ID
   * This is useful for external applications that need to link Nittei's events to their own data models
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  externalId?: string | null
  /**
   * Optional location of the event
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  location?: string | null
  /**
   * Optional status of the event
   */
  status?: CalendarEventStatus | null
  /**
   * Optional flag to indicate if the event is an all day event
   * Default is false
   */
  allDay?: boolean
  /**
   * Optional start time of the event (UTC)
   */
  startTime?: Date
  /**
   * Optional duration of the event in milliseconds
   */
  duration?: number
  /**
   * Optional busy flag
   */
  busy?: boolean
  /**
   * Optional new recurrence rule
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  recurrence?: RRuleOptions | null
  /**
   * Optional service UUID
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  serviceId?: ID | null
  /**
   * Optional list of exclusion dates for the recurrence rule
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  exdates?: Array<Date>
  /**
   * Optional recurring event ID
   * This is the ID of the recurring event that this event is part of
   * Default is None
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  recurringEventId?: ID | null
  /**
   * Optional original start time of the event
   * This is the original start time of the event before it was moved (only for recurring events)
   * Default is None
   */
  originalStartTime?: Date | null
  /**
   * Optional list of reminders
   */
  reminders?: Array<CalendarEventReminder>
  /**
   * Optional metadata (e.g. {"key": "value"})
   * None = don't update, Some(None) = set to NULL, Some(Some(value)) = set to value
   */
  metadata?: JsonValue | null
  /**
   * Optional created date to use to replace the current one
   */
  created?: Date
  /**
   * Optional updated date to use to replace the current one
   */
  updated?: Date
}
