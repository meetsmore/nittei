name: ðŸ”’ build-docker-and-merge-docker

env:
  REGISTRY_IMAGE: ${{ github.repository_owner }}/${{ github.event.repository.name }}

on:
  workflow_call:
    inputs:
      distro:
        required: true
        type: string
      with_datadog_profiling:
        required: true
        type: boolean

# Adapted from https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
jobs:
  build-docker:
    name: Build Docker image for ${{ inputs.distro }} on ${{ matrix.platform }} (DD ${{ inputs.with_datadog_profiling }})
    # We use a custom runner for ARM64 builds.
    runs-on: ${{ matrix.platform == 'linux/amd64' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    permissions:
      contents: read
      packages: write
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost/nittei

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          file: "./${{ inputs.distro }}${{ inputs.with_datadog_profiling && 'WithDD' || '' }}.Dockerfile"
          platforms: ${{ matrix.platform }}
          # Handle the correct arch
          build-args: |
            ARCH=${{ matrix.platform == 'linux/amd64' && 'x86_64' || 'aarch64' }}
            GIT_REPO_URL=github.com/${{ github.repository }}
            GIT_COMMIT_HASH=${{ github.sha }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.distro }}-${{ inputs.with_datadog_profiling }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-docker:
    runs-on: ubuntu-latest
    needs:
      - build-docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ inputs.distro }}-${{ inputs.with_datadog_profiling }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set version env
        run: |
          # v1.0.0 --> 1.0.0
          VERSION=${GITHUB_REF#refs/*/}
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV

      - name: Set Docker tags
        id: set-tags
        run: |
          # For debian: latest, debian, 1.0.0
          # For debian with DD: dd-latest, debian-dd, dd-1.0.0
          # For alpine: alpine-latest, alpine, alpine-1.0.0
          # For alpine with DD: alpine-dd-latest, alpine-dd, alpine-dd-1.0.0

          if [[ "${{ inputs.distro }}" == "debian" ]]; then
            if [[ "${{ inputs.with_datadog_profiling }}" == "true" ]]; then
              echo "TAGS=dd-latest, debian-dd, dd-${{ env.VERSION }}" >> $GITHUB_ENV
            else
              echo "TAGS=latest, debian, ${{ env.VERSION }}" >> $GITHUB_ENV
            fi
          elif [[ "${{ inputs.distro }}" == "alpine" ]]; then
            if [[ "${{ inputs.with_datadog_profiling }}" == "true" ]]; then
              echo "TAGS=alpine-dd-latest, alpine-dd, alpine-dd-${{ env.VERSION }}" >> $GITHUB_ENV
            else
              echo "TAGS=alpine-latest, alpine, alpine-${{ env.VERSION }}" >> $GITHUB_ENV
            fi
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ env.TAGS }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
